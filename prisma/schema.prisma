// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                String            @id @default(uuid())
  name              String?
  email             String?           @unique
  phone             String?
  emailVerified     DateTime?
  gender            Gender?
  dateOfBirth       DateTime?
  image             String?
  role              UserRole          @default(USER)
  password          String
  accounts          Account[]
  sessions          Session[]
  isVerfied         Boolean           @default(false)
  token             Int
  doctorSpecialties DoctorSpecialty[] // ðŸ‘ˆ Explicit join table
  availabilities    Availability[] // ðŸ‘ˆ Ajout de la relation ici
  address           String?

  employmentStatusId String?
  employmentStatus   EmploymentStatus? @relation(fields: [employmentStatusId], references: [id])

  doctorPrescriptions  Prescription[] @relation("DoctorPrescriptions")
  patientPrescriptions Prescription[] @relation("PatientPrescriptions")

  consultationsAsPatient Consultation[] @relation("ConsultationPatient")
  consultationsAsDoctor  Consultation[] @relation("ConsultationDoctor")

  medicalHistories MedicalHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialty {
  id   String @id @default(uuid())
  name String @unique

  doctorSpecialties DoctorSpecialty[] // ðŸ‘ˆ Explicit join table
}

model DoctorSpecialty {
  userId      String
  specialtyId String

  user      User      @relation(fields: [userId], references: [id])
  specialty Specialty @relation(fields: [specialtyId], references: [id])

  assignedAt DateTime @default(now()) // Example of extra metadata

  @@id([userId, specialtyId]) // Composite primary key
}

model EmploymentStatus {
  id   String @id @default(uuid())
  name String @unique

  users User[]
}

model Availability {
  id       String @id @default(uuid())
  title    String
  doctorId String
  doctor   User   @relation(fields: [doctorId], references: [id])

  startDate DateTime
  endDate   DateTime
  isBooked  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prescription {
  id           String   @id @default(uuid())
  patientId    String
  doctorId     String
  doctor       User     @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  patient      User     @relation("PatientPrescriptions", fields: [patientId], references: [id])
  pdfUrl       String
  durationDays Int
  createdAt    DateTime @default(now())
}

model MedicalHistory {
  id        String   @id @default(uuid())
  patientId String
  patient   User     @relation(fields: [patientId], references: [id])
  condition String
  notes     String?
  date      DateTime
  documents File[] // fichiers attachÃ©s (PDF, images, etc.)

  createdAt DateTime @default(now())
}

model Consultation {
  id        String   @id @default(uuid())
  patientId String
  doctorId  String
  date      DateTime
  notes     String?
  documents File[]

  patient User @relation("ConsultationPatient", fields: [patientId], references: [id])
  doctor  User @relation("ConsultationDoctor", fields: [doctorId], references: [id])
}

model File {
  id         String   @id @default(uuid())
  url        String
  name       String
  type       String // "pdf", "image", ...
  uploadedAt DateTime @default(now())

  MedicalHistory   MedicalHistory? @relation(fields: [medicalHistoryId], references: [id])
  medicalHistoryId String?

  Consultation   Consultation? @relation(fields: [consultationId], references: [id])
  consultationId String?
}
