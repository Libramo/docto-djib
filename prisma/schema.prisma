// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
}

model User {
  id                String            @id @default(uuid())
  name              String?
  email             String?           @unique
  phone             String?
  emailVerified     DateTime?
  image             String?
  role              UserRole          @default(USER)
  password          String
  accounts          Account[]
  sessions          Session[]
  isVerfied         Boolean           @default(false)
  token             Int
  doctorSpecialties DoctorSpecialty[] // ðŸ‘ˆ Explicit join table

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Specialty {
  id   String @id @default(uuid())
  name String @unique

  doctorSpecialties DoctorSpecialty[] // ðŸ‘ˆ Explicit join table
}

model DoctorSpecialty {
  userId      String
  specialtyId String

  user      User      @relation(fields: [userId], references: [id])
  specialty Specialty @relation(fields: [specialtyId], references: [id])

  assignedAt DateTime @default(now()) // Example of extra metadata

  @@id([userId, specialtyId]) // Composite primary key
}
